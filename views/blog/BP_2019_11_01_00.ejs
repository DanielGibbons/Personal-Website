<%- include('../shared/_header.ejs', {viewData: viewData}) %>

<%- include('../shared/_blog-header.ejs', {blogData: blogData}) %>

<div class="blog-post-container">

	<h2 class="sub-title">Overview</h2>
	<p class="body-text">
		On the web, the Hyper Text Transfer Protocol (HTTP) has been the primary protocol for requesting and delivering
		hypermedia documents such as web pages for years, although it is not encrypted and therefore unsecure. The solution
		to this insecurity is HTTPS. HTTPS is effectively HTTP with security which utilises Transport Layer Security (TLS) to
		encrypt the transfer of data through the use of certificates. This security protocol involves three components - a
		certificate authority, a private key and a public certificate. The certificate authority is a company like GoDaddy or
		LetsEncrypt which has been approved to verify domains and issue secure signed certificates and keys. The private key
		is used by the website when it responds to a client request to encrypt the data in its reply. Along with the reply
		the website sends its public certificate to the client and the browser decrypts the sent message using this
		certificate. With this protocol the browser can verify that the data received has indeed been sent by the intended
		sender.
	</p>

	<h2 class="sub-title">Requesting a Certificate from GoDaddy</h2>
	<p class="body-text">
		I'm not going to go in to too much detail here as the steps on the website are pretty self explanatory. However, one
		thing to note is that there is no need to provide GoDaddy with a certificate request (CSR) using IIS which is what
		many tutorials recommend. You can simply allow GoDaddy to generate the certificate request itself. Once you've
		followed the steps it may take a while for GoDaddy to issue your private key and certificates (mine took
		approximately 24 hours).
	</p>

	<h2 class="sub-title">Downloading Private Key and CSR</h2>
	<p class="body-text">
		These are the first things to download from GoDaddy. I haven't had any use for the CSR yet, although its good to keep
		for your records. As you can probably gather from the name the private key must be kept private.
	</p>

	<h2 class="sub-title">Downloading Certificates</h2>
	<p class="body-text">
		This is the slightly confusing bit (or at least I thought so). You'll have a number of download options such as
		Apache or IIS although I'd recommend you download the 'other' option. In this package you'll get a 'crt' file, a
		'pem' file and a bundle certificate authority 'crt' file. Copy the contents of this folder so that these certificates
		are in the same directory as the private key and CSR you previously downloaded.
	</p>

	<h2 class="sub-title">Creating a PFX Certificate</h2>
	<p class="body-text">
		In your directory you should now have 2 public certificates - a 'crt' and a 'pem' which for all intents and purposes
		are equivalent. You'll also have a 'bundle' certificate authority - mine was called <strong>g2_bundle-g2-g1.crt</strong>
		and a private
		key file and a CSR file.
	</p>
	<ul>
		<li class="body-text">
			Now run the following command:
		</li>
	</ul>
	<p class="body-text">
		<code>openssl pks12 -out &ltdomain_name&gt.pfx -in &ltpublic_certificate_name&gt.crt -inkey &ltprivate_key_name&gt.key -cafile &ltgodaddy_ca&gt.crt</code>
	</p>
	<ul>
		<li class="body-text">
			If the command above fails to load your private key file run the following command to correct the file's encoding.
			After doing so rerun the previous openssl command but use the modified version of your private key.
		</li>
	</ul>
	<p class="body-text">
		<code>tail -c +4 &ltprivate_key_name&gt.key &gt &ltprivate_key_modified_name&gt.key</code>
	</p>

	<p class="body-text">
		Upon executing the 'openssl' command you will be prompted to enter a password to lock your PFX file.
	</p>

	<h2 class="sub-title">Uploading PFX Certificate to Azure App Service</h2>
	<p class="body-text">
		On your app service resource head to the <strong>custom domains</strong> section and add an SSL binding to the domain
		which you generated your SSL certificates for. All you have to do is upload the certificate and enter the password
		that you set for your PFX certificate using openssl.
	</p>
</div>

<%- include('../shared/_footer.ejs') %>